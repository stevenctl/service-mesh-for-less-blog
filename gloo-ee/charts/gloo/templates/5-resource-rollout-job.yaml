{{- if .Values.gateway.rolloutJob.enabled }}
{{- $image := .Values.gateway.rolloutJob.image }}
{{- if .Values.global }}
{{- $image = merge .Values.gateway.rolloutJob.image .Values.global.image }}
{{- end }}
apiVersion: batch/v1
kind: Job
metadata:
  labels:
{{ include "gloo.labels" . | indent 4}}
    gloo: resource-rollout
  name: gloo-resource-rollout
  namespace: {{ .Release.Namespace }}
  annotations:
    # Argo checks the status of resources in an app to determine its state. Since a job is cleaned up (deleted) after ttlSecondsAfterFinished,
    # the missing job causes the argo app to go out of sync.
    # Annotating this job as a Sync hook along with an argo-specific hook deletion policy ensures that even when the job is cleaned up,
    # it does not alter the state of the argo app and that it is still in sync.
    argocd.argoproj.io/hook: Sync
    argocd.argoproj.io/hook-delete-policy: BeforeHookCreation
spec:
  {{- include "gloo.jobSpecStandardFields" .Values.gateway.rolloutJob | nindent 2 -}}
  template:
    metadata:
      labels:
        gloo: resource-rollout
        sidecar.istio.io/inject: "false"
        {{- if .Values.gateway.rolloutJob.extraPodLabels }}
        {{- range $key, $value := .Values.gateway.rolloutJob.extraPodLabels }}
        {{ $key | quote }}: {{ $value | quote }}
        {{- end }}
        {{- end }}
      {{- if or .Values.settings.linkerd .Values.gateway.rolloutJob.extraPodAnnotations }}
      annotations:
        {{- if .Values.settings.linkerd }}
        "linkerd.io/inject": disabled
        {{- end }}
        {{- range $key, $value := .Values.gateway.rolloutJob.extraPodAnnotations }}
        {{ $key | quote }}: {{ $value | quote }}
        {{- end }}
      {{- end }}
    spec:
      {{- include "gloo.pullSecret" $image | nindent 6 -}}
      serviceAccountName: gloo-resource-rollout
      {{- include "gloo.podSpecStandardFields" .Values.gateway.rolloutJob | nindent 6 -}}
      volumes:
        - name: custom-resource-config-volume
          configMap:
            name: gloo-custom-resource-config
            items:
              - key: custom-resources
                path: custom-resources
            {{- if .Values.global.extraCustomResources }}
              - key: extra-custom-resources
                path: extra-custom-resources
            {{- end }}
      containers:
        - name: kubectl
          image: {{template "gloo.image" $image}}
          imagePullPolicy: {{ $image.pullPolicy }}
          env:
            - name: HAS_CUSTOM_RESOURCES
              valueFrom:
                configMapKeyRef:
                  name: gloo-custom-resource-config
                  key: has-custom-resources
          {{- if .Values.global.extraCustomResources }}
            - name: HAS_EXTRA_CUSTOM_RESOURCES
              valueFrom:
                configMapKeyRef:
                  name: gloo-custom-resource-config
                  key: has-extra-custom-resources
          {{- end }}
          volumeMounts:
            - name: custom-resource-config-volume
              mountPath: /etc/gloo-custom-resources
          {{- $securityDefaults := dict "runAsNonRoot" true }}
          {{- if not .Values.gateway.rolloutJob.floatingUserId -}}
            {{- $_ := set $securityDefaults "runAsUser" .Values.gateway.rolloutJob.runAsUser }}
          {{- end -}}
          {{- include "gloo.containerSecurityContext" (dict "values" .Values.gateway.rolloutJob.containerSecurityContext "defaults" $securityDefaults "podSecurityStandards" .Values.global.podSecurityStandards "indent" 10 "globalSec" .Values.global.securitySettings) }}
          {{- with .Values.gateway.rolloutJob.resources }}
          resources: {{ toYaml . | nindent 12}}
          {{- end }}
          command:
          - /bin/sh
          - -c
          - |
            {{ if and .Values.gateway.enabled .Values.gateway.validation.enabled .Values.gateway.validation.webhook.enabled -}}
            # if validation webhook is enabled, wait for deployment rollout so validation service will be available
            kubectl rollout status deployment -n {{ .Release.Namespace }} gloo
            {{- end }}

            # apply extra Gloo Edge custom resources - these are created in enterprise
            if [ "$HAS_EXTRA_CUSTOM_RESOURCES" == "true" ]
            then
              kubectl apply -f /etc/gloo-custom-resources/extra-custom-resources || exit $?
            else
              echo "no extra custom resources to apply"
            fi

            # apply Gloo Edge custom resources
            if [ "$HAS_CUSTOM_RESOURCES" == "true" ]
            then
              kubectl apply -f /etc/gloo-custom-resources/custom-resources || exit $?
            else
              echo "no custom resources to apply"
            fi

            # remove the resource-policy annotations that were added temporarily by the gloo-resource-migration job during upgrade
            kubectl annotate upstreams.gloo.solo.io -n {{ $.Release.Namespace }} -l app=gloo helm.sh/resource-policy- || exit $?
            {{- range include "gloo.gatewayNamespaces" $ | fromJsonArray }}
            kubectl annotate gateways.gateway.solo.io -n {{ . }} -l app=gloo helm.sh/resource-policy- || exit $?
            {{- end }}
{{- end }}{{/* if .Values.gateway.rolloutJob.enabled  */}}
