{{ define "glooMtls.certGenJobSpec" }}
{{- $image := .Values.gateway.certGenJob.image }}
{{- if .Values.global  }}
{{- $image = merge .Values.gateway.certGenJob.image .Values.global.image }}
{{- end }}
{{- if .Values.global.glooMtls.enabled }}
apiVersion: batch/v1
kind: Job
metadata:
  labels:
{{ include "gloo.labels" . | indent 4}}
    gloo: gloo-mtls-certgen
  name: gloo-mtls-certgen
  namespace: {{ .Release.Namespace }}
  annotations:
    {{- /* With ArgoCD, there is no concept or installs or upgrades. Everything is a sync. */}}
    {{- /* Due to this behavour of ArgoCD, the value of `gateway.certGenJob.runOnUpdate` can not be respected and will run on every sync. */}}
    {{- if .Values.gateway.certGenJob.runOnUpdate }}
    "helm.sh/hook": pre-install, pre-upgrade
    {{- include "gloo.jobHelmDeletePolicySucceededAndBeforeCreation" .Values.gateway.certGenJob | nindent 4 }}
    {{- else }}
    "helm.sh/hook": pre-install
    {{- include "gloo.jobHelmDeletePolicySucceeded" .Values.gateway.certGenJob | nindent 4 }}
    {{- end }}
    "helm.sh/hook-weight": "10"
spec:
  {{- include "gloo.jobSpecStandardFields" .Values.gateway.certGenJob | nindent 2 -}}
  template:
    metadata:
      labels:
        gloo: gloo-mtls-certs
        sidecar.istio.io/inject: "false"
        {{- if .Values.gateway.certGenJob.extraPodLabels }}
        {{- range $key, $value := .Values.gateway.certGenJob.extraPodLabels }}
        {{ $key | quote }}: {{ $value | quote }}
        {{- end }}
        {{- end }}
      {{- if or .Values.settings.linkerd .Values.gateway.certGenJob.extraPodAnnotations }}
      annotations:
        {{- if .Values.settings.linkerd }}
        "linkerd.io/inject": disabled
        {{- end }}
        {{- range $key, $value := .Values.gateway.certGenJob.extraPodAnnotations }}
        {{ $key | quote }}: {{ $value | quote }}
        {{- end }}
      {{- end }}
    spec:
      {{- include "gloo.pullSecret" $image | nindent 6 -}}
      serviceAccountName: certgen
      {{- include "gloo.podSpecStandardFields" .Values.gateway.certGenJob | nindent 6 -}}
      containers:
        - image: {{template "gloo.image" $image}}
          imagePullPolicy: {{ $image.pullPolicy }}
          name: certgen
          {{- $securityDefaults := dict "runAsNonRoot" true }}
          {{- if not .Values.gateway.certGenJob.floatingUserId }}
            {{- $_ := set $securityDefaults "runAsUser" .Values.gateway.certGenJob.runAsUser }}
          {{- end }}
          {{- include "gloo.containerSecurityContext" (dict "values" .Values.gateway.certGenJob.containerSecurityContext "defaults" $securityDefaults "podSecurityStandards" .Values.global.podSecurityStandards "indent" 10 "globalSec" .Values.global.securitySettings) }}
          {{- with .Values.gateway.certGenJob.resources }}
          resources: {{ toYaml . | nindent 12}}
          {{- end }}
          env:
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          args:
            - "--secret-name=gloo-mtls-certs"
            - "--svc-name=gloo"
            - "--rotation-duration={{ .Values.gateway.certGenJob.rotationDuration }}"
            {{- if .Values.gateway.certGenJob.forceRotation }}
            - "--force-rotation=true"
            {{- end }} {{/* if .Values.gateway.certGenJob.forceRotation */}}
{{- end }} {{/* if .Values.global.glooMtls.enabled */}}
{{- end }} {{/* define gateway.certGenJob.JobSpec*/}}

{{/* Render template with yaml overrides */}}
{{- $kubeResourceOverride := dict -}}
{{- if .Values.gateway.certGenJob -}}
{{- $kubeResourceOverride = .Values.gateway.certGenJob.mtlsKubeResourceOverride -}}
{{- end -}}
{{- include "gloo.util.merge" (list . $kubeResourceOverride "glooMtls.certGenJobSpec") -}}
